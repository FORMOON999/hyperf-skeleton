<?php

declare(strict_types=1);

namespace %NAMESPACE%;

use App\Common\Core\BaseService;
use App\Common\Exceptions\BusinessException;
use Lengbin\Helper\YiiSoft\Arrays\ArrayHelper;
%USES%
class %CLASS% extends BaseService implements %INHERITANCE%
{

    public function __construct(protected %MODEL_NAME% $%MODEL_NAME%)
    {

    }

/**
     * @param array $condition 控制参数
     * @param array $search 搜索参数
     * @param array $field 字段
     * @param array $sort 排序条件
     * @param array $page 分页条件
     * @return array
     */
    public function getList(array $condition, array $search, array $field = ['*'], array $sort = [], array $page = []): array
    {
        $query = $this->%MODEL_NAME%->buildQuery($search, $sort)->select($field);
        // todo 其他自己实现
        $result = $this->admin->output($query, $page);
        if (ArrayHelper::isValidValue($condition, '_format')) {
            $result['list'] = $this->toArray($result['list'], function ($data) use ($condition) {
                return $this->format($data, $condition);
            });
        }
        return $result;
    }

    /**
     * @param array $data 添加数据
     * @param array $condition 控制参数
     * @return array
     */
    public function create(array $condition, array $data): array
    {
        $data = $this->validate($condition, $data);
        $model = clone $this->%MODEL_NAME%;
        $model->fill($data);
        $ret = $model->save();
        $result = $ret ? $model->getKey() : 0;

        if (! $result && ArrayHelper::isValidValue($condition, '_throw')) {
            throw new BusinessException(AdminError::CREATE_ERROR());
        }
        return $result;
    }

    /**
     * @param array $condition 控制参数
     * @param array $search 搜索参数
     * @param array $data 数据
     * @return int
     */
    public function modify(array $condition, array $search, array $data): int
    {
        $data = $this->validate($condition, $data, $search);
        $result = $this->%MODEL_NAME%->buildQuery($search)->update($data);
        if (! $result && ArrayHelper::isValidValue($condition, '_throw')) {
            throw new BusinessException(AdminError::UPDATE_ERROR());
        }
        return $result;
    }

    /**
     * @param array $condition 控制参数
     * @param array $search 搜索参数
     * @return int
     */
    public function remove(array $condition, array $search): int
    {
        $query = $this->%MODEL_NAME%->buildQuery($search);
        $result = ArrayHelper::isValidValue($condition, '_delete') ? $query->forceDelete() : $query->delete();
        if (! $result && ArrayHelper::isValidValue($condition, '_throw')) {
            throw new BusinessException(AdminError::DELETE_ERROR());
        }
        return $result;
    }

    /**
     * @param array $condition 控制参数
     * @param array $search 搜索参数
     * @param array $field 字段
     * @return array
     */
    public function detail(array $condition, array $search, array $field = ['*']): array
    {
        $query = $this->%MODEL_NAME%->buildQuery($search, $sort)->select($field);
        // todo 其他自己实现
        /**
         * @var %MODEL_NAME_ENTITY% $result
         */
        $result = $query->first();
        if (! $result && ArrayHelper::isValidValue($condition, '_throw')) {
            throw new BusinessException(AdminError::NOT_FOUND());
        }
        if (ArrayHelper::isValidValue($condition, '_format')) {
            return $this->format($result, $condition);
        }
        return $result;
    }


    /**
     * @param array  $condition 控制参数
     * @param array  $data 数据
     * @return array
     */
    public function validate(array $condition, array $data, array $search = []): array
    {
        return $data;
    }


    /**
     * @param %MODEL_NAME_ENTITY% $result 数据
     * @param array $condition 控制参数
     * @return array
     */
    public function format(%MODEL_NAME_ENTITY% $result, array $condition): %MODEL_NAME_ENTITY%
    {
        return $result;
    }
}
